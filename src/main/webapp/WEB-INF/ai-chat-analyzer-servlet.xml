<?xml version="1.0" encoding="UTF-8"?>
<!-- add xml namespaces, xmlns-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Spring MVC Configuration -->
	
	<!-- 3. Add support for Spring component scanning (scan package for any Spring 
	Beans and make them available and add them to spring context) -->
	<context:component-scan base-package="com.github.veeshostak.aiChatAnalyzerWeb" />

	<!-- 4. Add support for conversion, formatting and validation  
	(annotatiuon-driven for form validation support) -->
	<mvc:annotation-driven/>

	<!-- 5. Define Spring MVC View Resolver (how do display the pages. SpringMvc will 
	automatically prepend prefix and append suffix (ex.for view: “show-chat-list”: /WEB-INF/view/ + show-chat-list + .jsp)) -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

<!-- ======================================================= -->

	<!-- Configuration for Spring + Hibernate -->

    <!-- Step 1: Define Database DataSource / connection pool (5-20 conections, idle time, etc)
	(C3p0 is an open source JDBC connection pooling library)
	(Connection pooling is an operation in which a system pre-initializes the connections to be 
	used in the future. This is done since creating connections at the time of use is an expensive operation))-->
	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="org.postgresql.Driver" />
        <property name="jdbcUrl" value="jdbc:postgresql://endpoint:port/db" />
        <property name="user" value="username" />
        <property name="password" value="password" /> 

        <!-- these are connection pool properties for C3P0 -->
        <property name="minPoolSize" value="5" />
        <property name="maxPoolSize" value="20" />
        <property name="maxIdleTime" value="30000" />
	</bean>  
	
    <!-- Step 2: Setup Hibernate session factory (what hibernate uses to connect to the DB) -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="packagesToScan" value="com.github.veeshostak.aiChatAnalyzerWeb.entity" />
		<property name="hibernateProperties">
		   <props>
		      <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL94Dialect</prop>
		      <prop key="hibernate.show_sql">true</prop>
		   </props>
		</property>
   </bean>	  

    <!-- Step 3: Setup Hibernate transaction manager (make use of Spring Framework’s transactional manager)  -->
	<bean id="myTransactionManager"
            class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- Step 4: Enable configuration of transactional behavior based on annotations 
    (minimize code when starting transaction by using @Transaction annotation)-->
	<tx:annotation-driven transaction-manager="myTransactionManager" />


	<!-- ======================================================= -->
	
	<!-- support for reading web resources: css, images, js, etc ... -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
	<!-- ** recurse on all subdirectories -->
	
	
	
</beans>











